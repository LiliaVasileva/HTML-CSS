HTML & CSS Introduction

HTML - език с който описваме уеб съдържанието на страница, използваме тагове за да дефинираме елементите 
чрез които можем да създадем нашата страница
<p></p> - таг параграф,
Някои елементи имат отварящ и затварящ таг, а някои само се извикват;
Изисквания винаги нашият файл трябва да започва с  <!DOCTYPE html> declaration, това не е таг
DOCTYPE реално дава информация на браузъра за какъв тип документ да очаква, или тоест на
коя е версията на HTML на която е написана страницата.
<meta/> - Мета таговете са части от информация, които използвате, за да кажете на търсачките и тези, 
които разглеждат вашия сайт повече за вашата страница и информацията, която съдържа. Мета таговете включват: 
Заглавие тагове: заглавието на вашата страница, което трябва да е уникално за всяка страница, която публикувате.
<b></b> bold tag, тук просто имаме текс който е болднат
<strong></strong> болд шрифта, визуално има същият резултат като <b> но реално дава информация, 
че някоя дума или елемент е важен за страницата
ALT SHIFT F - shourt cut за форматиране на кода.

Емет дава опцията да попълва така нареченият бойлер плейт - 
Emmet is a plugin for many popular text editors which greatly improves HTML & CSS workflow:
 < documentation = https://docs.emmet.io/abbreviations/syntax/>
ul>li.red*6 ако го напишем в VSC:

<ul>
	<li class="red"></li>
	<li class="red"></li>
	<li class="red"></li>
	<li class="red"></li>
	<li class="red"></li>
	<li class="red"></li>
</ul>

<h1></h1> - най-голямото заглавие на страницата, заглавието на нашият сайт;
от <h1 - h6 има тагове за заглавие;
<p></p> параграф;
<br/> break оставя празно място между параграфите;
<a href = ""></a> link хипер линкове или линкове, отварящ и затварящ таг, на къде води линка се подава
в атрибута href ="",
Local links - референция към елемент на нашата страница, можем да имаме линкове които да сочат като 
елементи на нашата страница, encure links

<h1 id="exercises">Exercises</h1>
<a href="#exercises" target ="_blank">Exercises</a> като на атрибута href, сложим #name_id, по този начин
можем да сочим към места в нашата страница;

By default, the linked page will be displayed in the current browser window. 
To change this, you must specify another target for the link.
The target attribute specifies where to open the linked document.
The target attribute can have one of the following values:

_self - Default. Opens the document in the same window/tab as it was clicked
_blank - Opens the document in a new window or tab
_parent - Opens the document in the parent frame
_top - Opens the document in the full body of the window


<img/> единичен таг, който много често се използва, има много атрибути,
има два задължителни атрибута, src и alt
<img src="url" alt="alternatetext"> 
Задължителният атрибут src определя пътя (URL) към изображението.

Забележка: Когато уеб страница се зареди, в този момент браузърът е този, 
който получава изображението от уеб сървър и го вмъква в страницата. 
Ето защо, уверете се, че изображението действително остава на същото място по отношение на уеб страницата,
в противен случай вашите посетители ще получат счупена икона за връзка. 
Иконата на счупена връзка и алтернативният текст се показват, ако браузърът не може да намери изображението.
<ol></ol> ordered list, имаме тагаве, които изистват използването на определени тагове в него;
ol - очаква че в него ще има <li></li> list item, 
ol taga има следните атрибути - 
- reversed - дава номерацията на list items на обратно, вместо да 1 ,2, 3, ще е 3, 2, 1
- start- атрибут, с който можем да посочваме началната стойност на list items, <ol start="50"></ol>,
означава, че изброяването ще започне от 50, а не от 1, както е по дефалт
-type- <ol type="1|a|A|i|I"> с този атрубут, можем да задаваме типа на изброяващата стойност, дали 
да е число, букви изброени по азбучен ред или числата от римската бройна система
Value	Description
1	Default. Decimal numbers (1, 2, 3, 4)
a	Alphabetically ordered list, lowercase (a, b, c, d)
A	Alphabetically ordered list, uppercase (A, B, C, D)
i	Roman numbers, lowercase (i, ii, iii, iv)
I	Roman numbers, uppercase (I, II, III, IV)

<ul></ul> неподреден списък, изброява по дефолт с булет знак
The <ul> tag defines an unordered (bulleted) list.

Use the <ul> tag together with the <li> tag to create unordered lists.
type atribute може да е disc, circle, square, none, 

Description lists using <dl>
The <dl> tag defines a description list.
The <dl> tag is used in conjunction with <dt> (defines terms/names) and <dd> (describes each term/name).
CTRL + SPACE - ни дава всички файлове в нашата директория 
./ - ни дава текущата директория
title като атрибут ни дава името на линка като атрибут на таговете; примерно 
<a title="bear link" href="some_link"></a> по този начин ако поставим мишката на линка на нашата страница
ще ни изпише title, който сме въвели;
анкер линкове, работят с атрибути id :
<h2 id="picture-section">Picture of a bear</h2>
как можем да отидем до нея, ако създадем линк, който да води към bear picture
<a href="#picture-section">Bear picture</a>, това ще ни даде линк към нещо което се намира на нашата страница

CSS - Cascading Style Sheets
чрез него се стилизират страницата, пишат се във файлове .css

h1{
font-size: 42px,
color: yellow
}
h1 - се нарича селектор, в скобите определяме как и с какво да го стилизираме, нашите декларации, наричат се 
пропартита с техните стойности - font-size

за да може да работи даден html with css, в head - taga, трябва да го свържем с линк към css файла
<link rel="stylesheet" type="text/css" href="styles.css"> задаваме му файл в нашият проект
имаме три начина по които можем да селектираме дадени елементи, за които да им задаваме стил,
можем да ги селектираме по елемента (h1 {color: blue}, можем да използваме класове <p class = "odd">
.odd {font-size: 10pt}
можем да селектираме по id на елемента:
<span id="login">  #login{width: 150 px}
може да селектираме елемента, по определен клас
< a class = "login">Login</a>  a.login {width: 80 px}

когато пишем css, първо селектираме тага, после с празно място влизаме в съдържащите елементи на тага примерно:
 <article> <h1>Test </h1> </article>

CSS 
article h1{
style here
}
Block and Inline Elements - блокове елементи;
<div> and <p> са блокови елементи
display: block, нашият елемент


Examples of block-level elements:

<div>
<h1> - <h6>
<p>
<form>
<header>
<footer>
<section>

Свойството display е най-важното свойство на CSS за контролиране на оформлението.
Свойството display определя дали/как се показва даден елемент.
Всеки HTML елемент има стойност за показване по подразбиране в зависимост от това какъв тип елемент е. 
Стойността на показване по подразбиране за повечето елементи е блокова или вградена.
Елемент на ниво блок винаги започва от нов ред и заема цялата налична ширина (разтяга се наляво и надясно, доколкото може).


Вграденият елемент не започва на нов ред и заема само толкова ширина, колкото е необходима.
Примери за вградени елементи:
<span>
<a>
<img>

Какво е специфичност?
Ако има две или повече CSS правила, които сочат към един и същ елемент, селекторът с най-висока стойност на специфичност ще „спечели“ и неговата декларация за стил ще бъде приложена към този HTML елемент.

Мислете за спецификата като резултат/ранг, който определя коя стилова декларация в крайна сметка се прилага към елемент.

Семантичен HTML 
гоогле индексирани, означава семантичните структури на сайта да са добре структурирани и да могат да се анализират
от ботове или алгоритми, кролари, с чиято помощ се индексират съдържанието на станицата, за да излиза напред при търсене;
Семантични тагове:
<article>
<aside>
<details>
<figcaption>
<figure>
<footer>
<header>
<main>
<mark>
<nav>
<section>
<summary>
<time>


<Forms - интеракция с потребителя, форм таг, който вътре в себе си очаква и приема
множество input полетащ
method = 'POST'  или GET, когато изпращаме информацията,
action = линк към страницата в която искаме да подадем формата
<input> type ="text", type="number", type="password", да не виждаме текста, който пишем
type="email", очаква валиден мейл, type="search"
type="checkbox", type="radio",type="range",type="submit", type="button", type="file"


 <label for="firstname">First name</label>
            <input type="text" id="firstname">
чрез for label, се задава за който точно елемент се създава инпут полето, ако на input му дадем дадено id,
с това id реферираме и свързваме label and input tag
разликата между value and placeholeder,  с placeholeder даваме директен пример информация какво да задам,
а value даваме стойността на input полето

 <label for="firstname">First name</label>
            <input type="text" id="firstname" value="John">

 <label for="firstname">First name</label>
            <input type="text" id="firstname" placeholder = "Please fill in First name">


<fieldset> когато искаме да групираме няколко елемента заедно;
<legend> difines a caption for the <fieldset> tag
<select> създава drop-down менюта

Tables
<table>
<tr> - row, ред
<td> - cell, колона


Топография - това е начин на стилизиране на текста на страницата ни;
-User-Friendly Headers
-White Space - пространство между думите и текста ни
- good margins to avoid walls of text, в css можем да задаваме по няколко начина
пространство между нашите елементи;
-Лесен за навигиране;
- Да сме консистентни в нашите
Font Files - допълнителни шрифтове
- OpenType(.OTF)
- TrueType (.TTF)
- Web Open Font Format (.WOFF)
-Web Open Font Format 2 (.WOOF2)

CSS properties - как се форматира текст;
CSS font
fonr-family/ font-face(e.g. sans-serif, Arial)
forn-size/line-height (e.g. 18 px)
font-weight (e.g. bold)
font-style (e.g. italic)
font-variant(e.g. SmallCaps)
всички тези пропартита на css са за шрифтове
когато имаме име на шрифт, когато е само една дума, не е задължително да добавяме кавички
p.ar{
    font-family: Arial, Helvetica;
    font-weight: bold;
    font-size: 30px;
}
p.tim{
    font-family: 'Times New Roman';
}

Ако искам да регистрирам нов шрифт, първо си го изтеглям и разархивирам папката,
след това го регистрирам в CSS. файла ми с 
@font-face {
    font-family: "Source Code Pro";
    src: url(Source_Code_Pro/SourceCodePro-VariableFont_wght.ttf);
}
като font-family - което задавам е името на шрифта, който ще ползвам за стилизиране на различните ми тагове
Пример:
p.ar{
    font-family: "Source Code Pro";
    font-weight: bold;
    font-size: 30px;
}
Другият вариант е да копираме линковете в хтмл и после да приложим рефернцията в css;

Generic Name
<generic-name> a broad class of similar fonts used in a prioritized list of fonts
- serif - all characters have  stroke endings, всички символи имат заострени крайща
- sans-serif - no character has stroke endings, обикновенно това е най приятният шрифт за четене
- monospace - all characters have the same width
-cursive- handwritten fonts;
- fanrasy - decorative fonts;

Font-Size:
px - pixel
pt - points, предимно за принтиране;не се работи с тази единица особено в web development, за принтиране на определени неща
em vs rem 

rem - се базира върху отношение, базисният размер на rem e 16 px
font-size : 1.5 rem == 24 px
em - пропорционална стойност на елементите, които я заобикалят
скаларни стойности

font-weight - колко е дебел шрифта

text-aligh - left, right, center, justify - нашият текст се разпростира върху целият ред, от край до край
line-height - дефинира височината на реда в който пишем текст

lether-spacing - пространството между нашите букви;
text-decoration = как да декорираме текста ни, има опции за overline, underline, line-through, none,
се използва основно за промяна на дефолтната стилизация, примерно на линк тага, винаги текста е подчертан,
със css text-decoration: none; премахваме дефолтната линия отдолу
text-indent - новият параграф започва по навътре в текста;
text-overflow - може да е clip, ellipsis, но има нужда от overflow and white-space атрибутите;
white-space - дефинира как пространството между думите ни работи,  има атрибути като wrap, nowrap, 
overflow: hidden  да не излиза от нашият елемент
text-transform: capitalize, uppercase, lowercase
text-shadow: можем да добавяме сянка на нашият текст 
p{
text-shadow: 2px 4px 10 px red;
}  първата стойност 2px - хоризонтално колко да се измести сянката,всяка положителна стойност
означава че вървим на дясно, 2пж от центъра на дясно, ако е 0 е центрирано, ако е -2px ще е от центъра на ляво
втората стойност 4px - е по вертикала ако е положителен вървим на долу, ако е отрицателен вървим нагоре,
трета е блъра, колко да прозира, ако е по голяма стойността сянката се разпростира много, колкото по малка е толкова повече се
прибира сянката, последната стойност е цвета;
Цветове на текста:
можем да използваме готови цветове - има +140 предифинрани готови цветове;
- можем да използваме и така наречените хекс цветове, дефинираме цветове които предимно имат 6 стойности, понякога
можем да видим и само с 3 стойности - #05ffb0
- RGB - цветове - първи параметър 



- ако искаме да сменим шрифта на даден елемент използваме пропартито font-family,
ако имаме шрифт от една дума, не е задължително да слагаме кавички в css :
font-family: Arial, Helvetica;
но ако имаме повече от една дума, задължително трябва да добавим и кавички:
font-family: "Times Roman";
Как да използваме къстоме шрифтове:
1. Вариант:
fonts.google.com
избираме шрифт, сваляме папката, разархивираме файловете и в css с пропартито 
@font-face {
    font-family: 'Raleway'; ( дефинираме името на нашият шрифт)
    src: url("Raleway/Raleway-VariableFont_wght.ttf"); (от къде зареждаме нашият файл)

}
го зареждаме, като на font-family слагаме кой е шрифта, а на src - линка към папката;
2.Начин:
чрез линкове също можем да слагаме шрифтове, в fonts.google.com избирайки нашият шрифт, отстрани има опция за 
Select Style - което отваря поп ъп с линк за самият шрифт, там имаме опция да избираме нежду link и @import
избирайки линк, копираме линковете който са зададени и ги слагаме в head на нашият html, там където
задаваме и вързката към css файла;
под линка има и информация която трябва да копираме и да сложим в нашият css като font-family пропарти, което трябва да 
ползваме за да използваме конкретният шрифт, който сме избрали;
Видове шрифтове:
serif text - с остри крайща;
sans-serif - най-предпочитания за четене, по загладени крайща;
monospace - всички букви широчината им е с еднакъв размер; (използва се най-често с примери за код)
cursive - шрифтове на ръка;
fantasy - всички декорактивни шрифтове;

Proparties:
font-size: px, pt, em, rem
em - може да използваме ако дефинираме типографията, какви ще са размерите на елементи
font-weight -  каква е удебелен нашият текст - thin - 100, light - 300, normal - 400, 700 - bold;
за смяна на дебелината на самият шрифт много зависи от самият шрифт дали поддържа даден размер
ако имаме шрифт, който поддържа само 400 като размер, не можем да го променим на 100;

text-align - как да центрираме текс, или да е от ляво или от дясно; - left, right, center, jystify (трансформира се така,
че да започва от единият край и да завършва на другия край)
line-height:  - височината на нашият ред между текста, стандарт е 1.5 - юнити е мерната единица;
letter-spacing - пространството между нашите букви, горе долу 1px e стандартно и добре, normal също може да се задъда
text-decoration - overline, underline, line-through, none; опредимно се използва за чистене на стилизацията
text-indent - задава нов параграф, започва текста малко по навътре;
text-overflow - clip, ellipsis, "-", ""
само по себе си text-overflow не променя нищо, за да работи трябва да добавим още две пропартита:
overflow: hidden; (visible, scroll, можем и да дефинираме само overflow-x: scroll; така ще има скрол по x, a по у, ще е 0
white-space: nowrap;
overflow - е за да не се вижда когато излиза елемента, ако го няма, текста ще излиза от елемента но ще се вижда;
white-space - дефинира пространството меджу думите ни, по този начин не се чупи текста да минава на друг ред, ако няма място
и най накрая вече ако имаме тази ситуация задаваме 
text-overflow - което ще коригира исканият ефект, да не се появява текста;
text-transform  - capitalize, uppercase, lowercase, да се сложи текста примерно всички думи да започват с главна буква, 
или всичко да е с главни букви
word-break: normal - кога дадена дума да отива на нов ред break-all, 
text-shadow  - можем да си добавяме сянка на нашият текст:
text-shadow: 2px 4px 10px red:
Първият параметър 2px - хоризонтално колко да се измести сянката, всяка положителна стойност върви на дясно, 0 е център, -2 от центъра на ляво
Втори параметър 4px - вертикално колко да се измести сянката, всяка положителна стойност върви нагоре, а отрицателна надолу
Трети параметър  10 px - колко да е блърната нашата сянка, колкото по голяма стойснота, толкова повече ще размива сянката
и ще е по ненаситена, колкото по малка толкова по наситена е сянката толкова по малка е стойността
color: - цвят на текста
Можем да променяме как да изглежда курсора на нашият елемент с :
cursor: pointer; (move, none, col-resize най-често се използва)

outline: 4px dotted red; има три параметъра - размер - как да се визуализира - цвят;
по често се използва border, a не outline;

как можем да използваме икони:
Font Awesome
за да можем да използваме най-новата версия в линка който копираме за иконката:
трябва на линка да променим версията просто;
Линка който добавяме в head =>
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.1.1/css/all.css">

html tag, който добавяме в нашият html код => <i class="fa-solid fa-trash"></i>

копираме го от сайта, като си изберем иконката, която ни трябва


CSS Box Model
всеки елемент има margin (разстоянието около елемента до други елемент), padding(разстоянието на елемента до границата на елемента)
border - line that goes around the padding
margin - transperant area ourside the border
padding - transperant area around the content

Елемнтите са по принцип два вида block и inline, може да има и inline-block елемент
block - съдържанието му се разпростира от край до край на реда примерно:
main, header, article, section, fieldset, nav, ul,ol, li,form,h1-h6, div

Inline елементи, те ще започнат там където има място за тях,:
a, label, map, span,strong,em,i,img, textarea,input,button, select
можем да добавяме margins and paddings just on right and left side of the element;

Inline-block не заема целият ред, но може да му се задава и margin and pandding като на блоков елемент; 
може да им се променя размера;
Височин и ширина на елемента
width: auto, винаги, ако променя широчината на елемента по хоризонтала;
max-width - максимална ширина на елемнта

div{
 width: 433px;
{

article{
max-width: 500px;
{
тази стойснот на максимална ширичина можем да паднем под нея, ако местим страницата,
но не можем да става по-голяма, същата логика се използва и за min-width
Можем да създаваме различни връзки между тях, идеята е че при визуализацията
на смяна на размера на страницата, да може да се регулира как изглеждат елементите;
примерно ако гледам станицата на мобилно устройство, ако зададем width: 100% ще може да е видим
елемента и на по малък изглед на страницата, но го използваме и с пропартито max-width: 400px(example)
по този начин на голям екран елемента ще е 400 px максимум, а на малък екран ще може да се вижда целият
защото е с width: 100%;

height - дефинира се от височината на съдържанието и винаги е auto, освен ако ние
не презапишем тази стойност; можем да променяме и височината на даден елемент;
по същата логика работи и max-height and min-height като при широчината

Margin, Padding and Borders

Използваме margin, когато искаме да създадем пространство между елементите


div{
	margin: 20px 20px 20px 20px;(margin-top, margin-right, matgin-bottom, margin-left) часовниковата стрелка
	padding: 30px 30px 30px 30px; (margin-top, margin-right, matgin-bottom, margin-left)
}

margin се дефинира извън нашият елемент, примерно между двата дива 
а padding пространството вътре в нашият елемент;

border - слой между padding and margin; width - 1px, style  - solid, dashed, dotted, color;
border: 4px dashed red; синтаксис на бордер и неговите стилизации;
border-radius - можем да използваме за да закръглим острите ъгли на елементите;
относно стилизации
Inline Element
ако на inline елемент pandding and margin - само от ляво и отдясно, нямаме по вертикала, отгоре и отдолу
на margin, въобще не го добавя от долу и отгоре, на padding го добавя от всички страни, но се държи по странен начин
отдолу и отгоре не го отбелязва, задава го, и може да се види в инспект, но визуално не се променя;

margin: auto; може да се използва за центриране само при блокови елементи;

Box-sizing:
как да контролираме размерите на нашата кутия; content-box - ако изберем по това пропарти да променяме
ще променяме само на съдържанието на кутията;

div{

box-sizing: border-box; ( се прилага на цялата кутия
(content-box - се прилага само на нашето съдържание, на нашето ядро)


div{

box-sizing: content-box;
width: 200px;
border: 10px solid blue;
padding: 5px

се изчислява по следният начин:
The full width is: 200px + 2*10px + 2*5px = 230px

Ако изплзваме 

div{

box-sizing: border-box;
width: 200px;
border: 10px solid blue;
padding: 5px

тогава размера на цялата кутия ще си е 200px

Ако искаме да използваме някой шрифт, най лесно е с import - само копираме линка който е в гоогле фонтс
и го пайстваме в css, после задаваме font-familito

центриране на бутон

button{
    display: block;
    margin: 0 auto;
{ правим го на блоков елемент и му залагаме маржин който да е 0 auto;
.article-list .article-item:nth-child(3) {
    margin-right: 0;
}

nth-child() точно на този елемент, който е в скобите можем да му задаваме други стилизации



Flex Box:

как да имплементираме елементи в ред и колони;
Flex box parent and child:

display: flex;
изграждане на layoult, чрез който да са организирани елементите в страница, основната структура на страницата
за да може да работи flex  трябва да имаме контейнер, който да групира нашите елементи;
flex се използва в parant на нашият контейнер; за да го включим, трябва да сложим пропартито:
display: flex;
елементите се променят така, че елементите стават толкова големи колкото тяхното съдържание

как да оправим това да не се променя елемента от съдържанието?

имаме достъп до целият бокс модел на нашите елементи, височина, широчина, margin and padding;
За да позиционираме нашите елементи на страницата използваме на пропартито:

flex-direction: column;(row,row-reverse, column-reverse)
row - default; винаги когато зададем flex, ако изрично не кажем дали да са колони или редове, винаги задава ред;
какво се случва ако имаме прекалено много елементи:
елементите ще се опитат да се запазят на същият ред, за да можем да изпратим елементите ни когато е нужно на нов ред
използваме пропартито на :

flex-wrap: wrap;(no wrap) default is no wrap- за това трябва да използваме wrap - за да ако са повече елементи
да ги изпраща на долният ред, всеки един елемент, който излиза извън тези 100% ще отиде на нов ред,
ако случайно остане място на реда, ние ще го виждаме, не го запълваме;

.some_class:nth-child(3n+1) - ще се селектира всеки трети елемент от контейнера
 съществува и .some_class_name: not(:nth-child(3n+0)) което ще направи стилизация на всички елементи освен на всеки трети

как да дефинираме пространство между нашите елементи;

flex-flow: row-reverse, wrap; с едно пропарти можем да дефинираме две неща, на къде ще се движат нашите елементи
и дали да има wrap или не, това е шорт-кът за flex-direction: column; и flex-wrap: wrap; 

как да работим с позициониране вътре в нашият флекс, когато искаме да работим по хоризонтала използваме
пропартито:

justify-contenet: baseline;(center, end, first-baseline, flex-end, left, right, space-araund and e.t.c, space-between, 
space-evenly)
space-between: - цялото възможно разстояние, което има в себе си, калкулира пространстворо МЕЖДУ елементите на равни интервали,
space-around - пространството около всеки един елемент, от всички страни
space-evenly - най-добрият вариант, калкулира еднакви интервали навсякъде, преди и след всеки елемент;
позициониране на къде да са нашите елементи;

как да позиционираме нашите елементи по вертикала:
 по вертикала винаги се стречват:

aline-items: strech(дефолтна стойност), всеки елемент по вертикала, по дефолт винаги се разтягат по цялото пространство;

aline-items: flex-start(center, flex-end, 
дори и някой елемент излиза извън границите на контейнера, не се променя центрирането с aline-items:
ако ни се налага да центрираме нещо използваме точно flex с justify-contenet и aline-items

когато използваме aline-items - ние наместваме елементите според техните размери, ще се позиционират спрямо един друг
контрол между празните редове:
aline-content: center ( дефинира съдържанието вътре във флекса, докато aline-items - намества елементите)


Пропартита за елементи вътре в контейнера:

order: 1;(индекс)
 - могат да се нареждат по големина, или когато ordera им е еднакъв, тоест ще се наредят спрямо какъв 
е order номера им, ако имам 6 елемента, по дефолт 6 ще са с 0, на всеки елемент, можем да слагаме order и по този начин
да го местим по реда; мога да имам 3 елемента с ордер - (1) , и да са и трите един до друг, а други 3 да с 0 и да са един до друг
преди тези с ордер 1; по този начин мога да ги групирам и местя по реда

flex-grow - дефинира как да расте нашият елемент когато има празно място
индекса, който се залага, на база, flex каллкулира какво е празното пространство, дефинираме как да се разпространи
празното пространство в самите ни елементи;
flex-shrink: index; когато нямаме достатъчно място в нашият контейнер; defoult - 1;
всички елементи във flex имат по дефолт - flex-shrink: 1; всички елементи се сменят с 1 единица;
flex-basis: auto; по дефолт - основнта дефолтна широчина, на един елемент;
ако зададем и трите пропартите наведнъж
шорт кът: 
flex: 0 1 300px;( grow  shrink basis) групово дефиниране на тези три основни пропартита;

позициониране на елементите по вертикала: 
align-self - това пропарти се слага на самият елемент и може да променя по вертикала позицията на елемента;
align-self: auto;(baseline, center, flex-end, flex-start, strech) 